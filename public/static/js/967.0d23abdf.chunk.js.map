{"version":3,"file":"static/js/967.0d23abdf.chunk.js","mappings":"8LAOMA,EAAa,CACfC,oBAAqB,IA6DzB,UA1D2B,SAACC,GAExB,IAAMC,GAAWC,EAAAA,EAAAA,MAETC,EAAgBH,EAAhBG,YAEAC,GAAkBC,EAAAA,EAAAA,KAAa,SAAAC,GAAK,OAAIA,EAAMC,WAA9CH,cACAI,GAAeH,EAAAA,EAAAA,KAAa,SAAAC,GAAK,OAAIA,EAAMG,MAA3CD,WAER,GAAoCE,EAAAA,EAAAA,UAAUZ,GAA9C,eAAOa,EAAP,KAAmBC,EAAnB,KAEQb,EAAwBY,EAAxBZ,qBAGRc,EAAAA,EAAAA,YAAU,WACN,GAAIT,EAAc,IAAMA,EAAc,GAAGU,WAAY,CACjD,IAAMC,EAAe,CACjBhB,oBAAqBK,EAAc,GAAGU,YAE1CF,EAAeG,QAEfH,EAAed,KAEpB,CAACM,KAGJS,EAAAA,EAAAA,YAAU,WACN,GAAIL,GAAcA,EAAWQ,OAAS,EAAG,CACrC,IAAMC,EAAiB,CACnBH,WAAYf,GAEhBE,GAAUiB,EAAAA,EAAAA,IAA0CD,OAEzD,CAAClB,EAAqBE,EAAUO,IAUnC,OACI,iBAAKW,UAAU,uBAAf,WACI,cAAGA,UAAU,gBAAb,0BACA,qBACIC,KAAK,sBACLC,SAAUlB,EACVmB,MAAQvB,EACRwB,SAfc,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACzBZ,GAAc,kBACPD,GADM,cAERa,EAAOJ,KAAOI,EAAOF,UAalBH,UAAU,iBACVM,YAAY","sources":["components/facturas/InvoiceCommentCard.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { startAddCommentCardValuesToActiveInvoice } from '../../actions/invoice';\r\n\r\nimport './facturas.css';\r\n\r\nconst initValues = {\r\n    commentInvoiceValue: '',\r\n}\r\n\r\nconst InvoiceCommentCard = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const { blockCharge } = props;\r\n\r\n    const { activeInvoice } = useSelector( state => state.invoice );\r\n    const { actionView } = useSelector( state => state.ui );\r\n\r\n    const [formValues, setFormValues] = useState( initValues );\r\n\r\n    const { commentInvoiceValue } = formValues;\r\n\r\n    //LLenar valores con los de la factura, si la hay caso contrario el valor inicial\r\n    useEffect(() => { \r\n        if( activeInvoice[0] && activeInvoice[0].comentario ){\r\n            const commentValue = {\r\n                commentInvoiceValue: activeInvoice[0].comentario,\r\n            }\r\n            setFormValues( commentValue );\r\n        }else{\r\n            setFormValues( initValues );\r\n        }\r\n    }, [activeInvoice]);\r\n\r\n    //Detectar cambios y agregarlos al activeInvoice\r\n    useEffect(() => {\r\n        if( actionView && actionView.length > 0 ){\r\n            const preparedValues = {\r\n                comentario: commentInvoiceValue\r\n            }\r\n            dispatch( startAddCommentCardValuesToActiveInvoice( preparedValues ) );\r\n        }\r\n    }, [commentInvoiceValue, dispatch, actionView]);\r\n\r\n    const handleInputChange = ({ target }) => {     \r\n        setFormValues({\r\n            ...formValues,\r\n            [target.name]: target.value\r\n        });\r\n    }\r\n    \r\n\r\n    return (\r\n        <div className='invoice-comment-card'>\r\n            <p className='comment-title'>Comentario:</p>\r\n            <textarea \r\n                name='commentInvoiceValue'\r\n                disabled={blockCharge}\r\n                value={ commentInvoiceValue }\r\n                onChange={ handleInputChange }\r\n                className='comment-detail' \r\n                placeholder='Escriba un comentario' \r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InvoiceCommentCard"],"names":["initValues","commentInvoiceValue","props","dispatch","useDispatch","blockCharge","activeInvoice","useSelector","state","invoice","actionView","ui","useState","formValues","setFormValues","useEffect","comentario","commentValue","length","preparedValues","startAddCommentCardValuesToActiveInvoice","className","name","disabled","value","onChange","target","placeholder"],"sourceRoot":""}