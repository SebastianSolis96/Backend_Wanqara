{"version":3,"file":"static/js/558.3f869644.chunk.js","mappings":"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","sources":["actions/stores.js","actions/methodPay.js","actions/seller.js","components/facturas/InvoiceSelectsCard.js"],"sourcesContent":["import Swal from 'sweetalert2';\r\n\r\nimport { fetchConToken } from '../helpers/fetch';\r\nimport { types } from '../types/types';\r\n\r\nexport const startStoresList = () => {\r\n    return async( dispatch ) => {\r\n\r\n        const userEncrypt = localStorage.getItem( 'p1');\r\n        const passwordEncrypt = localStorage.getItem( 'p2');\r\n        const databaseEncrypt = localStorage.getItem( 'p3');\r\n        const schemaEncrypt = localStorage.getItem( 'p4');\r\n\r\n        const resp = await fetchConToken( 'store', { \r\n            userEncrypt, \r\n            passwordEncrypt, \r\n            databaseEncrypt,\r\n            schemaEncrypt }, \r\n            'POST' );\r\n        const body = await resp.json();\r\n        \r\n        if( body.ok ){\r\n            ( body.msg.length > 0 ) && dispatch( storesList( body.msg ) );\r\n        }else{\r\n            Swal.fire({\r\n                title: 'Error',\r\n                text: body.msg,\r\n                icon: 'error',\r\n                confirmButtonText: 'Ok',\r\n                confirmButtonColor: \"#0191CE\"\r\n            });\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst storesList = ( storesList ) => ({\r\n    type: types.bodegaList,\r\n    payload: storesList\r\n});\r\n\r\nexport const startBodegaAux = ( bodega ) => {\r\n    return async( dispatch ) => {\r\n        dispatch( bodegaAux( bodega ) );\r\n    }\r\n}\r\n\r\nconst bodegaAux = ( bodega ) => ({\r\n    type: types.bodegaAux,\r\n    payload: bodega\r\n});","import Swal from 'sweetalert2';\r\n\r\nimport { fetchConToken } from '../helpers/fetch';\r\nimport { types } from '../types/types';\r\n\r\nexport const startMethodPayList = () => {\r\n    return async( dispatch ) => {\r\n\r\n        const userEncrypt = localStorage.getItem( 'p1');\r\n        const passwordEncrypt = localStorage.getItem( 'p2');\r\n        const databaseEncrypt = localStorage.getItem( 'p3');\r\n        const schemaEncrypt = localStorage.getItem( 'p4');\r\n\r\n        const resp = await fetchConToken( 'method', { \r\n            userEncrypt, \r\n            passwordEncrypt, \r\n            databaseEncrypt,\r\n            schemaEncrypt }, \r\n            'POST' );\r\n        const body = await resp.json();\r\n        \r\n        if( body.ok ){\r\n            ( body.msg.length > 0 ) && dispatch( methodPayList( body.msg ) );\r\n        }else{\r\n            Swal.fire({\r\n                title: 'Error',\r\n                text: body.msg,\r\n                icon: 'error',\r\n                confirmButtonText: 'Ok',\r\n                confirmButtonColor: \"#0191CE\"\r\n            });\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst methodPayList = ( methodList ) => ({\r\n    type: types.methodPayListType,\r\n    payload: methodList\r\n});","import Swal from 'sweetalert2';\r\n\r\nimport { fetchConToken } from '../helpers/fetch';\r\nimport { types } from '../types/types';\r\n\r\nexport const startSellerList = () => {\r\n    return async( dispatch ) => {\r\n\r\n        const userEncrypt = localStorage.getItem( 'p1');\r\n        const passwordEncrypt = localStorage.getItem( 'p2');\r\n        const databaseEncrypt = localStorage.getItem( 'p3');\r\n        const schemaEncrypt = localStorage.getItem( 'p4');\r\n\r\n        const resp = await fetchConToken( 'seller', { \r\n            userEncrypt, \r\n            passwordEncrypt, \r\n            databaseEncrypt,\r\n            schemaEncrypt }, \r\n            'POST' );\r\n        const body = await resp.json();\r\n        \r\n        if( body.ok ){\r\n            ( body.msg.length > 0 ) && dispatch( sellerList( body.msg ) );\r\n        }else{\r\n            Swal.fire({\r\n                title: 'Error',\r\n                text: body.msg,\r\n                icon: 'error',\r\n                confirmButtonText: 'Ok',\r\n                confirmButtonColor: \"#0191CE\"\r\n            });\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst sellerList = ( sellersList ) => ({\r\n    type: types.sellerListType,\r\n    payload: sellersList\r\n});","import { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { startAddSelectsCardValuesToActiveInvoice } from '../../actions/invoice';\r\nimport { startMethodPayList } from '../../actions/methodPay';\r\nimport { startSellerList } from '../../actions/seller';\r\nimport { startBodegaAux, startStoresList } from '../../actions/stores';\r\n\r\nimport './facturas.css';\r\n\r\nconst initValues = {\r\n    plazoValueInvoice: '',\r\n    vendendorValueInvoice: '',\r\n    bodegaValueInvoice: '',\r\n}\r\n\r\nconst InvoiceSelectsCard = (props) => {\r\n\r\n    const { blockCharge } = props;\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n    const { activeInvoice } = useSelector( state => state.invoice );\r\n    const { actionView } = useSelector( state => state.ui );\r\n    const { storeList } = useSelector( state => state.bodega );\r\n    const { methodList } = useSelector( state => state.method );\r\n    const { sellerList } = useSelector( state => state.seller );\r\n\r\n    const [formValues, setFormValues] = useState( initValues );\r\n\r\n    const { plazoValueInvoice, vendendorValueInvoice, bodegaValueInvoice } = formValues;\r\n\r\n    // Obtener listados para llenar selects.\r\n    useEffect(() => {\r\n        //Si no hay listados, llamar a la API y traerlos\r\n        ( storeList.length === 0 ) && dispatch( startStoresList() );\r\n        ( methodList.length === 0 && storeList.length > 0 ) && dispatch( startMethodPayList() );\r\n        ( sellerList.length === 0 && methodList.length > 0 && storeList.length > 0 ) \r\n            && dispatch( startSellerList() );\r\n\r\n        //Si hay factura, posicionar los selects en los valores de la factura, sino el primero [0]\r\n        if( activeInvoice[0] && activeInvoice[0].vendedor && activeInvoice[0].bodega \r\n            && activeInvoice[0].dividendos ){\r\n            \r\n            //Enviar el valor de la bodega al store para seleccionar artículos de esa bodega\r\n            ( storeList.length > 0 ) && dispatch( startBodegaAux( activeInvoice[0].bodega.trim() ) );\r\n\r\n            const selectsValues = {\r\n                plazoValueInvoice: activeInvoice[0].dividendos.trim(),\r\n                vendendorValueInvoice: activeInvoice[0].vendedor.trim(),\r\n                bodegaValueInvoice: activeInvoice[0].bodega.trim(),\r\n            }\r\n            setFormValues( selectsValues );\r\n        }else{\r\n            if( storeList.length > 0 && methodList.length > 0 && sellerList.length > 0 ){\r\n\r\n                //Enviar el valor de la bodega al store para seleccionar artículos de esa bodega\r\n                dispatch( startBodegaAux( storeList[0].codigo.trim() ) );\r\n\r\n                const productInit = {\r\n                    plazoValueInvoice: methodList[0].codigo.trim(),\r\n                    vendendorValueInvoice: sellerList[0].codigoven.trim(),\r\n                    bodegaValueInvoice: storeList[0].codigo.trim(),\r\n                }\r\n                setFormValues( productInit );\r\n            }else{\r\n                setFormValues( initValues );\r\n            }\r\n        }\r\n\r\n    }, [ dispatch, storeList, methodList, sellerList, activeInvoice ]);\r\n\r\n    //Enviar el valor de la bodega al store cuando cambie el select de bodega\r\n    useEffect(() => {\r\n        ( storeList.length > 0 && bodegaValueInvoice.length > 0 ) \r\n            && dispatch( startBodegaAux( bodegaValueInvoice ) );\r\n    }, [ bodegaValueInvoice, storeList, dispatch ]);\r\n\r\n    //Detectar cambios y agregarlos al activeInvoice solo si hay listados\r\n    useEffect(() => {\r\n        if( storeList.length > 0 && methodList.length > 0 && sellerList.length > 0 \r\n            && plazoValueInvoice.length > 0 && vendendorValueInvoice.length > 0 \r\n            && bodegaValueInvoice.length > 0 && actionView && actionView.length > 0 ){\r\n            const preparedValues = {\r\n                dividendos: plazoValueInvoice,\r\n                vendedor: vendendorValueInvoice,\r\n                bodega: bodegaValueInvoice,\r\n            }\r\n            dispatch( startAddSelectsCardValuesToActiveInvoice(preparedValues) );\r\n        }\r\n    }, [dispatch, plazoValueInvoice, vendendorValueInvoice, bodegaValueInvoice, storeList, methodList, \r\n        sellerList, actionView ]);\r\n\r\n    const handleInputChange = ({ target }) => {\r\n        setFormValues({\r\n                ...formValues,\r\n                [target.name]: target.value\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className='invoice-selects-card'>\r\n            <div className='invoice-select'>\r\n                <label className='invoice-select-title'>Plazo</label>\r\n                <div className='invoice-select-input'>\r\n                    <select \r\n                        id='standard-select'\r\n                        name='plazoValueInvoice'\r\n                        value={ plazoValueInvoice }\r\n                        onChange={ handleInputChange }\r\n                        disabled={ ( blockCharge ) ? true : false }\r\n                    >\r\n                        {methodList.map( group => ( \r\n                            <option \r\n                                key={ group.codigo.trim() }\r\n                                value={ group.codigo.trim() }\r\n                            >\r\n                                { group.codigo.trim() +' - '+ group.detalle.trim() }\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    \r\n                </div>\r\n            </div>\r\n\r\n            <div className='invoice-select'>\r\n                <label className='invoice-select-title'>Vendedor</label>\r\n                <div className='invoice-select-input'>\r\n                    <select \r\n                        id='standard-select'\r\n                        name='vendendorValueInvoice'\r\n                        value={ vendendorValueInvoice.trim() }\r\n                        onChange={ handleInputChange }\r\n                        disabled={ ( blockCharge ) ? true : false }\r\n                    >\r\n                        {sellerList.map( group => ( \r\n                            <option \r\n                                key={ group.codigoven.trim() }\r\n                                value={ group.codigoven.trim() }\r\n                            >\r\n                                { group.codigoven.trim() +' - '+ group.nombreven.trim() }\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n\r\n            <div className='invoice-select'>\r\n                <label className='invoice-select-title'>Bodega</label>\r\n                <div className='invoice-select-input'>\r\n                    <select \r\n                        id='standard-select'\r\n                        name='bodegaValueInvoice'\r\n                        value={ bodegaValueInvoice.trim() }\r\n                        onChange={ handleInputChange }\r\n                        disabled={ ( blockCharge ) ? true : false }\r\n                    >\r\n                        {storeList.map( group => ( \r\n                            <option \r\n                                key={ group.codigo.trim() }\r\n                                value={ group.codigo.trim() }\r\n                            >\r\n                                { group.codigo.trim() +' - '+ group.nombre.trim() }\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InvoiceSelectsCard;"],"names":["startStoresList","dispatch","userEncrypt","localStorage","getItem","passwordEncrypt","databaseEncrypt","schemaEncrypt","fetchConToken","resp","json","body","ok","msg","length","storesList","Swal","title","text","icon","confirmButtonText","confirmButtonColor","type","types","payload","startBodegaAux","bodega","bodegaAux","methodPayList","methodList","startSellerList","sellerList","sellersList","initValues","plazoValueInvoice","vendendorValueInvoice","bodegaValueInvoice","props","blockCharge","useDispatch","activeInvoice","useSelector","state","invoice","actionView","ui","storeList","method","seller","useState","formValues","setFormValues","useEffect","vendedor","dividendos","trim","selectsValues","codigo","productInit","codigoven","preparedValues","startAddSelectsCardValuesToActiveInvoice","handleInputChange","target","name","value","className","id","onChange","disabled","map","group","detalle","nombreven","nombre"],"sourceRoot":""}