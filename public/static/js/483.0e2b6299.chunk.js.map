{"version":3,"file":"static/js/483.0e2b6299.chunk.js","mappings":"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","sources":["components/clientes/ClienteModal.js","components/clientes/ClientesScreen.js"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Modal from 'react-modal/lib/components/Modal';\r\n\r\nimport Swal from 'sweetalert2';\r\n\r\nimport { uiCloseModal } from '../../actions/ui'\r\nimport { grabarIva, isNumeric } from '../../helpers/standarClientValues';\r\nimport { clientClearActiveClient, startEditClient } from '../../actions/clients';\r\n\r\nconst customStyles = {\r\n    content: {\r\n        top: '50%',\r\n        left: '50%',\r\n        right: 'auto',\r\n        bottom: 'auto',\r\n    },\r\n};\r\nModal.setAppElement('#root');\r\n\r\nlet initValues = {\r\n    rucValueModal: '',\r\n    nombreValueModal: '',\r\n    direccionValueModal: '',\r\n    telefonoValueModal: '',\r\n    correoValueModal: '',\r\n    ivaValueModal: false,\r\n}\r\n\r\nconst ClienteModal = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const { modalOpen } = useSelector(state => state.ui);\r\n    const { actionModal, clientActive } = useSelector(state => state.client);\r\n\r\n    const [formValues, setFormValues] = useState( initValues );\r\n\r\n    const { \r\n        rucValueModal, \r\n        nombreValueModal, \r\n        direccionValueModal, \r\n        telefonoValueModal, \r\n        correoValueModal, \r\n        ivaValueModal } = formValues;\r\n\r\n    const fillClientModal = {\r\n        ruc: rucValueModal,\r\n        nombre: nombreValueModal,\r\n        grabaIva: grabarIva(ivaValueModal),\r\n        direccion: direccionValueModal,\r\n        telefono: telefonoValueModal,\r\n        correo: correoValueModal,\r\n    }\r\n\r\n    useEffect(() => {\r\n        if( clientActive ){\r\n            const clientValues = {\r\n                rucValueModal: parseInt(clientActive.ruc.trim()),\r\n                nombreValueModal: clientActive.nombrec.trim(),\r\n                direccionValueModal: clientActive.direccion.trim(),\r\n                telefonoValueModal: clientActive.telefono.trim(),\r\n                correoValueModal: clientActive.e_mail.trim(),\r\n                ivaValueModal: parseInt(clientActive.reg_iva.trim()) === 0 ? true : false,\r\n            }\r\n\r\n            setFormValues( clientValues );\r\n        }else{\r\n            setFormValues( initValues );\r\n        }\r\n    }, [clientActive]);\r\n\r\n    const handleInputChange = ({ target }) => {\r\n\r\n        if( target.type === 'checkbox' ){\r\n            setFormValues({\r\n                ...formValues,\r\n                [target.name]: target.checked\r\n            });\r\n        }else{\r\n            setFormValues({\r\n                ...formValues,\r\n                [target.name]: target.value\r\n            });\r\n        }\r\n    }\r\n    \r\n    const closeModal = (e) => {\r\n        e.preventDefault();\r\n        dispatch( uiCloseModal() );\r\n        dispatch( clientClearActiveClient() );\r\n        setFormValues( initValues );\r\n    }\r\n\r\n    const handleEditClient = (e) => {\r\n        e.preventDefault();\r\n\r\n        if( rucValueModal !== '' && isNumeric(rucValueModal) && nombreValueModal !== '' ){\r\n            Swal.fire({\r\n                title: '¿Desea guardar los cambios?',\r\n                showDenyButton: true,\r\n                confirmButtonText: 'Guardar',\r\n                confirmButtonColor: '#0191CE',\r\n                denyButtonText: `No guardar`,\r\n            }).then(( result ) => {\r\n                if( result.isConfirmed ){\r\n                    dispatch( startEditClient( fillClientModal, clientActive.codigoc ) );\r\n                }\r\n            })\r\n        }else\r\n            Swal.fire({\r\n                title: \"Error\",   \r\n                text: 'Asegúrese de no dejar campos vacíos o verifique el RUC sea numérico',   \r\n                icon: \"error\",   \r\n                showCancelButton: false,      \r\n                confirmButtonColor: \"#0191CE\",   \r\n                confirmButtonText: \"OK\",   \r\n                closeOnConfirm: false,   \r\n                closeOnCancel: false,\r\n                customClass: \"Custom_Cancel\"\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={ modalOpen }\r\n            onRequestClose={ closeModal }\r\n            shouldCloseOnOverlayClick={false}\r\n            style={ customStyles }\r\n            closeTimeoutMS={ 200 }\r\n            className=\"modal\"\r\n            overlayClassName=\"modal-fondo\"\r\n        >\r\n            \r\n            <form className='form-client-modal'>\r\n                <header>\r\n                    <h1 className='title-client-modal'>Cliente</h1>\r\n                    {\r\n                        (actionModal === 'edit') &&\r\n                            <p className='required-fields-modal'>* Datos obligatorios</p>\r\n                    }\r\n                </header>\r\n                <hr/>\r\n                <div className='codigo-input-modal'>\r\n                    <label>Código: </label>\r\n                    <p className='code-client-modal'>{ ( clientActive ) ? clientActive.codigoc : '' }</p>\r\n                </div>\r\n\r\n                <div className='ruc-input-modal'>\r\n                    <label>\r\n                        RUC\r\n                        {\r\n                            (actionModal === 'edit') &&\r\n                                <i className='required-input'>*</i>\r\n                        } \r\n                    </label>\r\n                    <input \r\n                        type='number'\r\n                        autoComplete='off'\r\n                        disabled={ ( actionModal === 'edit' ) ? false : true }\r\n                        placeholder='1799999999'\r\n                        name='rucValueModal'\r\n                        value={ rucValueModal }\r\n                        onChange={ handleInputChange } \r\n                    />\r\n                </div>\r\n\r\n                <div className='nombre-input-modal'>\r\n                    <label>\r\n                        Nombre \r\n                        {\r\n                            (actionModal === 'edit') &&\r\n                                <i className='required-input'>*</i>\r\n                        } \r\n                    </label>\r\n                    <input \r\n                        type='text' \r\n                        autoComplete='off'\r\n                        disabled={ ( actionModal === 'edit' ) ? false : true }\r\n                        placeholder='EMPRESA EJEMPLO SA'\r\n                        name='nombreValueModal'\r\n                        value={ nombreValueModal }\r\n                        onChange={ handleInputChange } \r\n                    />\r\n                </div>\r\n\r\n                <div className='direccion-input-modal'>\r\n                    <label>Dirección</label>\r\n                    <input \r\n                        type='text'\r\n                        autoComplete='off'\r\n                        disabled={ ( actionModal === 'edit' ) ? false : true }\r\n                        placeholder='CALLE 1 N51 12 Y CALLE 2'\r\n                        name='direccionValueModal'\r\n                        value={ direccionValueModal }\r\n                        onChange={ handleInputChange } \r\n                    />\r\n                </div>\r\n\r\n                <div className='telefono-input-modal'>\r\n                    <label>Teléfono</label>\r\n                    <input \r\n                        type='text' \r\n                        autoComplete='off'\r\n                        disabled={ ( actionModal === 'edit' ) ? false : true }\r\n                        placeholder='099 999 9999; 02 222 2222'\r\n                        name='telefonoValueModal'\r\n                        value={ telefonoValueModal }\r\n                        onChange={ handleInputChange } \r\n                    />\r\n                </div>\r\n\r\n                <div className='correo-input-modal'>\r\n                    <label>Correo</label>\r\n                    <input \r\n                        type='email' \r\n                        autoComplete='off'\r\n                        disabled={ ( actionModal === 'edit' ) ? false : true }\r\n                        placeholder='ejemplo@gmail.com; ejemplo2@gmail.com'\r\n                        name='correoValueModal'\r\n                        value={ correoValueModal }\r\n                        onChange={ handleInputChange } \r\n                    />\r\n                </div>\r\n                <div className='iva-input-modal'>\r\n                    <label>Registra IVA</label>\r\n                    <input \r\n                        type='checkbox' \r\n                        name='ivaValueModal'\r\n                        disabled={ ( actionModal === 'edit' ) ? false : true }\r\n                        checked={ ivaValueModal }\r\n                        onChange={ handleInputChange } \r\n                    />\r\n                </div>\r\n                \r\n                <div className='buttons-column'>\r\n                    {\r\n                        (actionModal === 'edit') &&\r\n                            <button \r\n                                onClick={ handleEditClient }\r\n                                className='button-save-modal'>\r\n                                GUARDAR\r\n                            </button>\r\n                    }\r\n                    <button \r\n                        onClick={ closeModal }\r\n                        className='button-close-modal'>\r\n                        CERRAR\r\n                    </button>\r\n                </div>\r\n            </form>\r\n\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ClienteModal;","import { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport Swal from 'sweetalert2';\r\n\r\nimport { clearSearchingClients, startClientList, startClientSave } from '../../actions/clients';\r\nimport { startClearInvoiceActive } from '../../actions/invoice';\r\nimport { onView } from '../../actions/ui';\r\nimport { grabarIva, isNumeric } from '../../helpers/standarClientValues';\r\nimport { useForm } from '../../hooks/useForm';\r\nimport DataTable from '../ui/DataTable';\r\nimport ClienteModal from './ClienteModal';\r\n\r\nimport './clientes.css';\r\n\r\n\r\nconst ClientesScreen = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n    const { user } = useSelector( state => state.auth );\r\n    const { clientList, clientsFind } = useSelector( state => state.client );\r\n    \r\n    const [loaded, setLoaded] = useState(false);\r\n\r\n    const { values, handleInputChange, reset } = useForm({\r\n        codigoValue: '',\r\n        rucValue: '',\r\n        nombreValue: '',\r\n        direccionValue: '',\r\n        telefonoValue: '',\r\n        correoValue: '',\r\n        ivaValue: false,\r\n    });\r\n\r\n    const { \r\n        codigoValue, \r\n        rucValue, \r\n        nombreValue, \r\n        direccionValue, \r\n        telefonoValue, \r\n        correoValue, \r\n        ivaValue } = values;\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem( 'thisPage', 'clientes' );\r\n        dispatch( onView( localStorage.getItem('thisPage') ) );\r\n        dispatch( clearSearchingClients() );\r\n        dispatch( startClearInvoiceActive() );\r\n    }, [dispatch]);\r\n\r\n    // Obtener listado de clientes.\r\n    useEffect(() => {\r\n        clientList.length === 0 && dispatch( startClientList() );\r\n        clientList.length > 0 && setLoaded(true);\r\n        \r\n    }, [dispatch, clientList]);\r\n\r\n    useEffect(() => {\r\n        if( clientsFind ){\r\n            setLoaded(false);\r\n            clientsFind.length > 0 && setLoaded(true);\r\n            clientList.length > 0 && setLoaded(true);\r\n        }\r\n    }, [clientsFind, clientList]);\r\n\r\n    const fillClient = {\r\n        codigo: codigoValue,\r\n        ruc: rucValue,\r\n        nombre: nombreValue,\r\n        grabaIva: grabarIva(ivaValue),\r\n        direccion: direccionValue,\r\n        telefono: telefonoValue,\r\n        correo: correoValue,\r\n    }\r\n\r\n    const handleSave = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if( codigoValue !== '' && rucValue !== '' && isNumeric(rucValue) && nombreValue !== '' ){\r\n            Swal.fire({\r\n                title: '¿Desea guardar los cambios?',\r\n                showDenyButton: true,\r\n                confirmButtonText: 'Guardar',\r\n                confirmButtonColor: '#0191CE',\r\n                denyButtonText: `No guardar`,\r\n            }).then(( result ) => {\r\n                if( result.isConfirmed )\r\n                    dispatch( startClientSave( fillClient, user ) );\r\n                    //Limpiar los campos del formulario después de guardar.\r\n                    reset();\r\n            })\r\n        }else\r\n            Swal.fire({\r\n                title: \"Error\",   \r\n                text: 'Asegúrese de no dejar campos vacíos o verifique el RUC sea numérico',   \r\n                icon: \"error\",   \r\n                showCancelButton: false,      \r\n                confirmButtonColor: \"#0191CE\",   \r\n                confirmButtonText: \"OK\",   \r\n                closeOnConfirm: false,   \r\n                closeOnCancel: false,\r\n                customClass: \"Custom_Cancel\"\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div className='client'>\r\n            <div className='container-client-header'>\r\n                <h1>Registro de clientes</h1>\r\n                <div className='container-client-details'>\r\n                    <form>\r\n                        \r\n                        <div className='first-column-client-input'>\r\n                            <div className='codigo-input'>\r\n                                <label>Código <i className='required-input'>*</i></label> \r\n                                <input \r\n                                    type='text' \r\n                                    placeholder='1799999999'\r\n                                    autoComplete='off'\r\n                                    name='codigoValue'\r\n                                    value={ codigoValue }\r\n                                    onChange={ handleInputChange }\r\n                                />\r\n                            </div>\r\n                            <div className='ruc-input'>\r\n                                <label>RUC <i className='required-input'>*</i></label>\r\n                                <input \r\n                                    type='number' \r\n                                    placeholder='1799999999'\r\n                                    autoComplete='off'\r\n                                    name='rucValue'\r\n                                    value={ rucValue }\r\n                                    onChange={ handleInputChange } \r\n                                />\r\n                            </div>\r\n                            <div className='nombre-input'>\r\n                                <label>Nombre <i className='required-input'>*</i></label>\r\n                                <input \r\n                                    type='text' \r\n                                    placeholder='EMPRESA EJEMPLO SA'\r\n                                    autoComplete='off'\r\n                                    name='nombreValue'\r\n                                    value={ nombreValue }\r\n                                    onChange={ handleInputChange } \r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className='second-column-client-input'>\r\n                            <div className='direccion-input'>\r\n                                <label>Dirección</label>\r\n                                <input \r\n                                    type='text' \r\n                                    placeholder='CALLE 1 N51 12 Y CALLE 2'\r\n                                    autoComplete='off'\r\n                                    name='direccionValue'\r\n                                    value={ direccionValue }\r\n                                    onChange={ handleInputChange } \r\n                                />\r\n                            </div>\r\n                            <div className='telefono-input'>\r\n                                <label>Teléfono</label>\r\n                                <input \r\n                                    type='text' \r\n                                    placeholder='099 999 9999; 02 222 2222'\r\n                                    autoComplete='off'\r\n                                    name='telefonoValue'\r\n                                    value={ telefonoValue }\r\n                                    onChange={ handleInputChange } \r\n                                />\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className='third-column-client-input'>\r\n                            <div className='correo-input'>\r\n                                <label>Correo</label>\r\n                                <input \r\n                                    type='email' \r\n                                    placeholder='ejemplo@gmail.com; ejemplo2@gmail.com'\r\n                                    autoComplete='off'\r\n                                    name='correoValue'\r\n                                    value={ correoValue }\r\n                                    onChange={ handleInputChange } \r\n                                />\r\n                            </div>\r\n                            <div className='iva-input'>\r\n                                <label>Registra IVA</label>\r\n                                <input \r\n                                    type='checkbox' \r\n                                    name='ivaValue'\r\n                                    checked={ ivaValue }\r\n                                    onChange={ handleInputChange } \r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        \r\n                        <div className='button-save-column'>\r\n                            <button \r\n                                onClick={ handleSave }\r\n                                className='button-save'>\r\n                                GUARDAR\r\n                            </button>\r\n                        </div>\r\n                        <p className='required-fields'>* Datos obligatorios</p>\r\n                    </form>\r\n                </div>\r\n\r\n                {loaded \r\n                    ?   ( (clientsFind) \r\n                            ? <DataTable items={ clientsFind } />\r\n                            : <DataTable items={ clientList } />\r\n                        )\r\n                    \r\n                    :   <div className='container-loading-client'>\r\n                            <i className=\"fa fa-circle-o-notch fa-spin fa-3x loading-client\"></i>\r\n                        </div> \r\n                }\r\n\r\n                <ClienteModal />\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ClientesScreen;"],"names":["customStyles","content","top","left","right","bottom","Modal","initValues","rucValueModal","nombreValueModal","direccionValueModal","telefonoValueModal","correoValueModal","ivaValueModal","dispatch","useDispatch","modalOpen","useSelector","state","ui","client","actionModal","clientActive","useState","formValues","setFormValues","fillClientModal","ruc","nombre","grabaIva","grabarIva","direccion","telefono","correo","useEffect","clientValues","parseInt","trim","nombrec","e_mail","reg_iva","handleInputChange","target","type","name","checked","value","closeModal","e","preventDefault","uiCloseModal","clientClearActiveClient","isOpen","onRequestClose","shouldCloseOnOverlayClick","style","closeTimeoutMS","className","overlayClassName","codigoc","autoComplete","disabled","placeholder","onChange","onClick","isNumeric","Swal","title","showDenyButton","confirmButtonText","confirmButtonColor","denyButtonText","then","result","isConfirmed","startEditClient","text","icon","showCancelButton","closeOnConfirm","closeOnCancel","customClass","user","auth","clientList","clientsFind","loaded","setLoaded","useForm","codigoValue","rucValue","nombreValue","direccionValue","telefonoValue","correoValue","ivaValue","values","reset","localStorage","setItem","onView","getItem","clearSearchingClients","startClearInvoiceActive","length","startClientList","fillClient","codigo","startClientSave","DataTable","items"],"sourceRoot":""}