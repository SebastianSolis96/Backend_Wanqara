{"version":3,"file":"static/js/818.5234e47b.chunk.js","mappings":"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","sources":["components/facturas/InvoiceValuesCard.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { invoiceTaskFinish, startUpdateValuesAndListProductsOnInvoice } from '../../actions/invoice';\r\n\r\nconst initValues = {\r\n    discountInvoiceValue: '0.00',\r\n}\r\n\r\nconst InvoiceValuesCard = (props) => {\r\n\r\n    const { blockCharge } = props;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const { porcentajeIva, tareaTerminada, activeInvoice } = useSelector( state => state.invoice );\r\n    const { actionView } = useSelector( state => state.ui );\r\n\r\n    const [formValues, setFormValues] = useState( initValues );\r\n\r\n    const { discountInvoiceValue } = formValues;\r\n\r\n    //Recalcular valores siempre que haya un cambio.\r\n    useEffect(() => {\r\n        const recalculateValues = () => {\r\n            let subtotalAcumulativoDoce = 0.0;\r\n            let subtotalAcumulativoCero = 0.0;\r\n            let bruto1 = 0.00;\r\n            let brutoA = 0.00;\r\n            let subtotalBaseCero = 0.00;\r\n            let subtotalBaseDoce = 0.00;\r\n            let impuestoArticulo = 0;\r\n            let brutoAcumulativo = 0.00;\r\n            let neto = 0.00;\r\n            let porcentajeDescuento1 = 0.00;\r\n            let descuento = 0.00;\r\n            let porcentajeIvaCalculado = porcentajeIva / 100;\r\n            let ivaFactura = 0.00;\r\n            let totalFactura = 0.00;\r\n            let precioAux;\r\n            let cantidadAux;\r\n            let impuestoAux;\r\n            let totalAux;\r\n\r\n            activeInvoice[0].listProducts.map( (product, index) => {\r\n\r\n                ( typeof product.precio === 'string' )\r\n                    ? precioAux = parseFloat( product.precio.trim() )\r\n                    : precioAux = product.precio;\r\n\r\n                ( typeof product.cantidad === 'string' )\r\n                    ? cantidadAux = parseFloat( product.cantidad.trim() )\r\n                    : cantidadAux = product.precio;\r\n                \r\n                bruto1 = parseFloat(precioAux) * parseFloat(cantidadAux);\r\n                brutoA += bruto1;\r\n\r\n                ( typeof product.impuesto === 'string' )\r\n                    ? impuestoAux = parseInt( product.impuesto.trim() )\r\n                    : impuestoAux = product.impuesto;\r\n\r\n                impuestoArticulo = parseInt(impuestoAux);\r\n\r\n                ( typeof product.total === 'string' )\r\n                    ? totalAux = parseFloat( product.total.trim() )\r\n                    : totalAux = product.total;\r\n\r\n                if(impuestoArticulo === 1 && activeInvoice[0].clienteRegistraIva === 0){\r\n                    subtotalBaseDoce = parseFloat(totalAux);\r\n                    subtotalAcumulativoDoce += subtotalBaseDoce;\r\n                }else{\r\n                    subtotalBaseCero = parseFloat(totalAux);\r\n                    subtotalAcumulativoCero += subtotalBaseCero;\r\n                }\r\n\r\n                return {};\r\n            });\r\n\r\n            //Al dispatch\r\n            brutoAcumulativo = brutoA; \r\n\r\n            //Al dispatch para actualizar el subtotal en pantalla\r\n            neto = subtotalAcumulativoCero + subtotalAcumulativoDoce; \r\n\r\n            let porcentajeDescuentoAux = 0.00;\r\n\r\n            porcentajeDescuentoAux = parseFloat(discountInvoiceValue.trim()).toFixed(2);\r\n\r\n            porcentajeDescuento1 = parseFloat(porcentajeDescuentoAux);\r\n            descuento = (porcentajeDescuento1 * neto) / 100;\r\n            //Al dispatch para modificar el valor del descuento en pantalla\r\n            let strDescuentoDosDecimales = descuento.toFixed(2)+''; \r\n            \r\n            subtotalBaseCero = subtotalAcumulativoCero;\r\n            subtotalBaseCero = subtotalBaseCero - ((porcentajeDescuento1 * subtotalBaseCero) / 100);\r\n\r\n            subtotalBaseDoce = subtotalAcumulativoDoce;\r\n            subtotalBaseDoce = subtotalBaseDoce - ((porcentajeDescuento1 * subtotalBaseDoce) / 100);\r\n\r\n            ivaFactura = subtotalBaseDoce * porcentajeIvaCalculado;\r\n            //Al dispatch para modificar el valor del IVA en pantalla\r\n            let strIvaFacturaDosDecimales = ivaFactura.toFixed(2)+''; \r\n\r\n            totalFactura = subtotalBaseDoce + subtotalBaseCero + ivaFactura;\r\n            //Al dispatch para modificar el valor del total en pantalla\r\n            let strTotalFacturaDosDecimales = totalFactura.toFixed(2)+''; \r\n\r\n            const preparedValues = {\r\n                base_0: subtotalBaseCero,\r\n                base_i: subtotalBaseDoce,\r\n                bruto: brutoAcumulativo,\r\n                descto: strDescuentoDosDecimales,\r\n                impuesto: strIvaFacturaDosDecimales,\r\n                neto: neto,\r\n                pdescto: porcentajeDescuento1,\r\n                total: strTotalFacturaDosDecimales,\r\n                listProducts: activeInvoice[0].listProducts,\r\n            }\r\n\r\n            dispatch( startUpdateValuesAndListProductsOnInvoice( preparedValues ) );\r\n\r\n        }\r\n\r\n        //Limpiar valores a 0 si elimino todos los productos\r\n        if( activeInvoice[0] && activeInvoice[0].listProducts && activeInvoice[0].listProducts.length === 0 \r\n            && actionView ){\r\n            if(  actionView === 'newInvoice' || actionView === 'editInvoice' ){\r\n                if( tareaTerminada && tareaTerminada.length > 0 ){\r\n                    recalculateValues();\r\n                    //Limpiar tarea terminada\r\n                    dispatch( invoiceTaskFinish('') );\r\n                }\r\n            }\r\n        }\r\n        \r\n        if( activeInvoice[0] && activeInvoice[0].listProducts && activeInvoice[0].listProducts.length > 0  \r\n            && actionView ){\r\n\r\n                if(  actionView === 'newInvoice' || actionView === 'editInvoice' ){\r\n                    const productListWithValues = activeInvoice[0].listProducts.filter(product => \r\n                            ( product.total && product.total.trim().length > 0 )\r\n                    );\r\n\r\n                    if( productListWithValues.length > 0 ){\r\n                        if( tareaTerminada && tareaTerminada.length > 0 ){\r\n                            recalculateValues();\r\n                            //Limpiar tarea terminada\r\n                            dispatch( invoiceTaskFinish('') );\r\n                        }\r\n                    }\r\n                }\r\n        }\r\n\r\n    }, [actionView, activeInvoice, discountInvoiceValue, dispatch, porcentajeIva, tareaTerminada]);\r\n    \r\n    // Si hay factura, recuperar los valores para el input\r\n    useEffect(() => {\r\n        if( activeInvoice[0] && activeInvoice[0].pdescto ){\r\n            const valuesInvoice = {\r\n                discountInvoiceValue: parseFloat(activeInvoice[0].pdescto).toFixed(2)+'',\r\n            }\r\n            setFormValues( valuesInvoice );\r\n        }\r\n    }, [activeInvoice]);\r\n\r\n    const handleInputChange = ({ target }) => {\r\n        //Si está vacío el input, se coloca el valor 0\r\n        const valuAux = '0.00';\r\n        if( target.value === '' ) \r\n            setFormValues({ [target.name]: valuAux }) \r\n        else \r\n            setFormValues({ [target.name]: target.value })\r\n        \r\n        //Indicador de tarea terminada para actualizar valores\r\n        dispatch( invoiceTaskFinish('changeInputDescto') );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='values-invoice'>\r\n                <p className='title-value-invoice'>Subtotal:</p>\r\n                { activeInvoice[0] && activeInvoice[0].neto\r\n                    ?   <p className='detail-value-invoice'>\r\n                            { parseFloat(activeInvoice[0].neto).toFixed(2) }\r\n                        </p>\r\n\r\n                    :   <p className='detail-value-invoice'>0.00</p>\r\n                }\r\n            </div>\r\n            \r\n            <div className='values-invoice'>\r\n                <p className='title-value-invoice'>%Descuento:</p>\r\n                <div className='discount-invoice-container'>\r\n                    <input \r\n                        name='discountInvoiceValue'\r\n                        value={ discountInvoiceValue }\r\n                        onChange={ handleInputChange }\r\n                        disabled={blockCharge}\r\n                        className='discount-invoice-input' \r\n                        autoComplete='off' \r\n                        type='number' \r\n                        placeholder='0.00' />\r\n\r\n                    { activeInvoice[0] && activeInvoice[0].descto \r\n                        ?   <p className='detail-value-invoice info'>\r\n                                { '$'+parseFloat(activeInvoice[0].descto).toFixed(2) }\r\n                            </p>\r\n                        :   <p className='detail-value-invoice info'>$0.00</p>\r\n                    }\r\n                </div>\r\n            </div>\r\n\r\n            <div className='values-invoice'>\r\n                <p className='title-value-invoice'>IVA:</p>\r\n                { activeInvoice[0] && activeInvoice[0].impuesto\r\n                    ?   <p className='detail-value-invoice'>\r\n                            { parseFloat(activeInvoice[0].impuesto).toFixed(2) }\r\n                        </p>\r\n                    : <p className='detail-value-invoice'>0.00</p>\r\n                }\r\n            </div>\r\n\r\n            <div className='values-invoice'>\r\n                <p className='title-value-invoice total'>TOTAL:</p>\r\n                { activeInvoice[0] && activeInvoice[0].total\r\n                    ?   <p className='detail-value-invoice total'>\r\n                            { activeInvoice[0].total }\r\n                        </p>\r\n                    :   <p className='detail-value-invoice total'>0.00</p>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InvoiceValuesCard;"],"names":["initValues","discountInvoiceValue","props","blockCharge","dispatch","useDispatch","useSelector","state","invoice","porcentajeIva","tareaTerminada","activeInvoice","actionView","ui","useState","formValues","setFormValues","useEffect","recalculateValues","brutoAcumulativo","neto","porcentajeDescuento1","precioAux","cantidadAux","impuestoAux","totalAux","subtotalAcumulativoDoce","subtotalAcumulativoCero","bruto1","brutoA","subtotalBaseCero","subtotalBaseDoce","impuestoArticulo","porcentajeIvaCalculado","ivaFactura","listProducts","map","product","index","precio","parseFloat","trim","cantidad","impuesto","parseInt","total","clienteRegistraIva","porcentajeDescuentoAux","toFixed","strDescuentoDosDecimales","strIvaFacturaDosDecimales","strTotalFacturaDosDecimales","preparedValues","base_0","base_i","bruto","descto","pdescto","startUpdateValuesAndListProductsOnInvoice","length","invoiceTaskFinish","filter","valuesInvoice","className","name","value","onChange","target","disabled","autoComplete","type","placeholder"],"sourceRoot":""}