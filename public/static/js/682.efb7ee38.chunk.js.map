{"version":3,"file":"static/js/682.efb7ee38.chunk.js","mappings":"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","sources":["helpers/addCharacterToNum.js","components/facturas/InvoiceInfoCard.js"],"sourcesContent":["export const addCharacterInvoiceNum = (num, character, steps) => {\r\n    let numWithCharacter = \"\";\r\n    if( num.length === 15 ) {\r\n        for (let i = 0; i < 6; i += steps) {\r\n            if (i + steps < 7) {\r\n                numWithCharacter += num.substring(i, i + steps) + character;\r\n            } else {\r\n                numWithCharacter += num.substring(i, 7);\r\n            }\r\n        }\r\n    }else{\r\n        numWithCharacter = 0;\r\n    }\r\n    return numWithCharacter;\r\n}","import { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport DatePicker, { registerLocale } from 'react-datepicker';\r\nimport moment from 'moment';\r\nimport es from 'date-fns/locale/es';\r\n\r\nimport { startAddInfoCardValuesToActiveInvoice } from '../../actions/invoice';\r\n\r\nimport { addCharacterInvoiceNum } from '../../helpers/addCharacterToNum';\r\n\r\nimport './facturas.css';\r\n\r\nregisterLocale('es', es)\r\n\r\nconst initValues = {\r\n    numInvoiceValue: '',\r\n    fechaValue: moment().toDate(),\r\n    venceValue: moment().toDate(),\r\n    radioInvoiceValue: 'E',\r\n}\r\n\r\nconst InvoiceInfoCard = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const { blockCharge } = props;\r\n\r\n    const { activeInvoice } = useSelector( state => state.invoice );\r\n    const { actionView } = useSelector( state => state.ui );\r\n\r\n    const [formValues, setFormValues] = useState( initValues );\r\n    const [changesInput, setChangesInput] = useState( true );\r\n\r\n    const { numInvoiceValue, fechaValue, venceValue, radioInvoiceValue } = formValues;\r\n\r\n    //LLenar valores con los de la factura, si la hay\r\n    useEffect(() => {\r\n        if( activeInvoice[0] && activeInvoice[0].factura && activeInvoice[0].fecha \r\n            && activeInvoice[0].vence && activeInvoice[0].tip ){\r\n            \r\n            /* Agregar guiones al numero de factura solo si hay 15 dígitos, caso contrario mantener \r\n            el valor sin guiones */\r\n            if( activeInvoice[0].factura.length === 15 ){\r\n                const infoValues = {\r\n                    numInvoiceValue: addCharacterInvoiceNum(activeInvoice[0].factura.trim(), \"-\", 3)+activeInvoice[0].factura.trim().substring(6),\r\n                    fechaValue: moment(activeInvoice[0].fecha).toDate(),\r\n                    venceValue: moment(activeInvoice[0].vence).toDate(),\r\n                    radioInvoiceValue: activeInvoice[0].tip\r\n                }\r\n                setFormValues( infoValues );\r\n            }else{\r\n                const infoValues = {\r\n                    numInvoiceValue: activeInvoice[0].factura,\r\n                    fechaValue: moment(activeInvoice[0].fecha).toDate(),\r\n                    venceValue: moment(activeInvoice[0].vence).toDate(),\r\n                    radioInvoiceValue: activeInvoice[0].tip\r\n                }\r\n                setFormValues( infoValues );\r\n            }\r\n        }else{\r\n            //Solo si existe un número de factura y los demás campos no\r\n            if( activeInvoice[0] && activeInvoice[0].factura && numInvoiceValue.length === 0 ){\r\n                const infoValues1 = {\r\n                    numInvoiceValue: addCharacterInvoiceNum(activeInvoice[0].factura.trim(), \"-\", 3)+activeInvoice[0].factura.trim().substring(6),\r\n                    fechaValue: moment().toDate(),\r\n                    venceValue: moment().toDate(),\r\n                    radioInvoiceValue: 'E'\r\n                }\r\n                setFormValues( infoValues1 );\r\n            }\r\n        }\r\n    }, [activeInvoice, numInvoiceValue]);\r\n    \r\n    //Detectar cambios y agregarlos al activeInvoice para guardar en la base de datos\r\n    useEffect(() => {\r\n        /* Ejecutar solo si el estado es true, o sea la primera vez que carga el componente, luego cambio \r\n        a false para que no se ejecute y en los handlersChange vuelve a ser true para volver a guardar  \r\n        cambios, localmente, después de ejecutar un cambio. */\r\n        if( changesInput ){\r\n            /* Si hay un número de factura, enviarlo al store junto con las demás propiedades y sino, solo \r\n            las propiedades. */\r\n            if( numInvoiceValue.length > 0 ){\r\n                const preparedValues = {\r\n                    factura: numInvoiceValue.replace(/-/g, ''),\r\n                    fecha: fechaValue.toLocaleString('en-US'),\r\n                    vence: venceValue.toLocaleString('en-US'),\r\n                    tip: radioInvoiceValue\r\n                }\r\n                setChangesInput( false );\r\n                dispatch( startAddInfoCardValuesToActiveInvoice(preparedValues) );\r\n            }else if( numInvoiceValue.length === 0 ){\r\n                const preparedValues = {\r\n                    fecha: fechaValue.toLocaleString('en-US'),\r\n                    vence: venceValue.toLocaleString('en-US'),\r\n                    tip: radioInvoiceValue\r\n                }\r\n                setChangesInput( false );\r\n                dispatch( startAddInfoCardValuesToActiveInvoice(preparedValues) );\r\n            }\r\n        }\r\n\r\n    }, [changesInput, dispatch, fechaValue, numInvoiceValue, radioInvoiceValue, venceValue]);\r\n\r\n    const handleInputChange = ({ target }) => {\r\n        setChangesInput( true );\r\n        if( target.type === 'radio' ){\r\n            setFormValues({\r\n                ...formValues,\r\n                radioInvoiceValue: target.value /* Esto se llama computar: Crea una nueva propiedad y el contenido de [objeto.propiedad] será el nombre de la propiedad */\r\n            });\r\n        }else{\r\n            let numeroFactura;\r\n            if( target.value.length === 15 ){\r\n                numeroFactura = addCharacterInvoiceNum(target.value, \"-\", 3)+target.value.substring(6);\r\n                setFormValues({\r\n                    ...formValues,\r\n                    [target.name]: numeroFactura\r\n                });\r\n            }else{\r\n                const newValue = target.value.replaceAll('-', '');\r\n                setFormValues({\r\n                    ...formValues,\r\n                    [target.name]: newValue\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleChangeFecha = (date) => {\r\n        setChangesInput( true );\r\n        setFormValues({\r\n            ...formValues,\r\n            fechaValue: moment(date).toDate()\r\n        });\r\n    }\r\n\r\n    const handleChangeVence = (date) => {\r\n        setChangesInput( true );\r\n        setFormValues({\r\n            ...formValues,\r\n            venceValue: moment(date).toDate()\r\n        });\r\n    }\r\n    \r\n    return (\r\n        <div className='invoice-info-card'>\r\n            <div className='num-invoice'>\r\n                <p className='invoice-num-title'>Número</p>\r\n                <input\r\n                    disabled={ ( blockCharge ) ? true : ( actionView === 'editInvoice' ) ? true : false }\r\n                    name='numInvoiceValue'\r\n                    value={numInvoiceValue}\r\n                    onChange={handleInputChange}\r\n                    placeholder='001-001-000000001'\r\n                    autoComplete='off'\r\n                    maxLength='15'\r\n                    className='invoice-num-input' \r\n                    type='text'\r\n                />\r\n            </div>\r\n\r\n            <div className='fecha-invoice'>\r\n                <p className='fecha-title'>Fecha: </p>\r\n                <DatePicker \r\n                    selected={ fechaValue }\r\n                    onChange={ handleChangeFecha }\r\n                    dateFormat='dd/MM/yyyy'\r\n                    locale='es'\r\n                    disabled={ ( blockCharge ) ? true : false }\r\n                />\r\n            </div>\r\n\r\n            <div className='fecha-invoice'>\r\n                <p className='fecha-title'>Vence: </p>\r\n                <DatePicker \r\n                    selected={venceValue} \r\n                    onChange={handleChangeVence}\r\n                    dateFormat='dd/MM/yyyy'\r\n                    locale='es'\r\n                    disabled={ ( blockCharge ) ? true : false }\r\n                />\r\n            </div>\r\n\r\n            <div className='tipo-invoice'>\r\n                <p className='tipo-invoice-title'>Tipo</p>\r\n\r\n                <div className='radio-tipo-invoice'>\r\n                    <label className='tipo-invoice-subtitle'>Efectivo: </label>\r\n                    <input \r\n                        className='radio-tipo-invoice-input' \r\n                        type='radio' \r\n                        name='efectivoInvoiceValue' \r\n                        value='E'\r\n                        checked={radioInvoiceValue === 'E'}\r\n                        onChange={handleInputChange}\r\n                        disabled={ ( blockCharge ) ? true : false }\r\n                        id='tipo-invoice-1'\r\n                    />\r\n\r\n                    <label className='tipo-invoice-subtitle space'>Crédito: </label>\r\n                    <input \r\n                        className='radio-tipo-invoice-input' \r\n                        type='radio' \r\n                        name='creditoInvoiceValue'\r\n                        value='C'\r\n                        checked={radioInvoiceValue === 'C'}\r\n                        onChange={handleInputChange}\r\n                        disabled={ ( blockCharge ) ? true : false }\r\n                        id='tipo-invoice-1' \r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InvoiceInfoCard;"],"names":["addCharacterInvoiceNum","num","character","steps","numWithCharacter","length","i","substring","registerLocale","es","initValues","numInvoiceValue","fechaValue","moment","toDate","venceValue","radioInvoiceValue","props","dispatch","useDispatch","blockCharge","activeInvoice","useSelector","state","invoice","actionView","ui","useState","formValues","setFormValues","changesInput","setChangesInput","useEffect","factura","fecha","vence","tip","infoValues","trim","infoValues1","preparedValues","replace","toLocaleString","startAddInfoCardValuesToActiveInvoice","handleInputChange","numeroFactura","target","type","value","name","newValue","replaceAll","className","disabled","onChange","placeholder","autoComplete","maxLength","selected","date","dateFormat","locale","checked","id"],"sourceRoot":""}