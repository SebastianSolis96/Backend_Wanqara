{"version":3,"file":"static/js/84.44fd989e.chunk.js","mappings":"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","sources":["actions/stores.js","components/articulos/ProductoModal.js","components/articulos/ArticulosScreen.js"],"sourcesContent":["import Swal from 'sweetalert2';\r\n\r\nimport { fetchConToken } from '../helpers/fetch';\r\nimport { types } from '../types/types';\r\n\r\nexport const startStoresList = () => {\r\n    return async( dispatch ) => {\r\n\r\n        const userEncrypt = localStorage.getItem( 'p1');\r\n        const passwordEncrypt = localStorage.getItem( 'p2');\r\n        const databaseEncrypt = localStorage.getItem( 'p3');\r\n        const schemaEncrypt = localStorage.getItem( 'p4');\r\n\r\n        const resp = await fetchConToken( 'store', { \r\n            userEncrypt, \r\n            passwordEncrypt, \r\n            databaseEncrypt,\r\n            schemaEncrypt }, \r\n            'POST' );\r\n        const body = await resp.json();\r\n        \r\n        if( body.ok ){\r\n            ( body.msg.length > 0 ) && dispatch( storesList( body.msg ) );\r\n        }else{\r\n            Swal.fire({\r\n                title: 'Error',\r\n                text: body.msg,\r\n                icon: 'error',\r\n                confirmButtonText: 'Ok',\r\n                confirmButtonColor: \"#0191CE\"\r\n            });\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst storesList = ( storesList ) => ({\r\n    type: types.bodegaList,\r\n    payload: storesList\r\n});\r\n\r\nexport const startBodegaAux = ( bodega ) => {\r\n    return async( dispatch ) => {\r\n        dispatch( bodegaAux( bodega ) );\r\n    }\r\n}\r\n\r\nconst bodegaAux = ( bodega ) => ({\r\n    type: types.bodegaAux,\r\n    payload: bodega\r\n});","import { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Modal from 'react-modal/lib/components/Modal';\r\n\r\nimport Swal from 'sweetalert2';\r\n\r\nimport { uiCloseModal } from '../../actions/ui'\r\nimport { checkArt, isNumeric } from '../../helpers/standarClientValues';\r\n\r\nimport { productClearActive, startEditProduct, startGroupsProductList } from '../../actions/products';\r\nimport { startStoresList } from '../../actions/stores';\r\n\r\nimport './articulos.css';\r\n\r\nconst customStyles = {\r\n    content: {\r\n        top: '50%',\r\n        left: '50%',\r\n        right: 'auto',\r\n        bottom: 'auto',\r\n    },\r\n};\r\nModal.setAppElement('#root');\r\n\r\nlet initValues = {\r\n    precio1ValueProductModal: '',\r\n    nombreValueProductModal: '',\r\n    grupoValueProductModal: '',\r\n    ivaValueProductModal: false,\r\n    servicioValueProductModal: false,\r\n}\r\n\r\nconst ProductoModal = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const { modalOpen } = useSelector(state => state.ui);\r\n    const { actionModal } = useSelector(state => state.client);\r\n    const { productActive, groupProductList } = useSelector(state => state.product);\r\n    const { storeList } = useSelector( state => state.bodega );\r\n\r\n    const [formValues, setFormValues] = useState( initValues );\r\n\r\n    const { \r\n        precio1ValueProductModal,\r\n        nombreValueProductModal,\r\n        grupoValueProductModal,\r\n        ivaValueProductModal,\r\n        servicioValueProductModal } = formValues;\r\n\r\n    const fillProductModal = {\r\n        precio: precio1ValueProductModal,\r\n        nombre: nombreValueProductModal,\r\n        grupo: grupoValueProductModal,\r\n        impuesto: checkArt(ivaValueProductModal),\r\n        servicio: checkArt(servicioValueProductModal)\r\n    }\r\n\r\n    useEffect(() => {\r\n        //Listar grupos y bodegas\r\n        ( groupProductList.length === 0 ) && dispatch( startGroupsProductList() );\r\n        ( storeList.length === 0 && groupProductList.length > 0 ) && dispatch( startStoresList() );\r\n\r\n    }, [dispatch, groupProductList, storeList]);\r\n\r\n    useEffect(() => {\r\n        if( productActive ){\r\n            const productValues = {\r\n                precio1ValueProductModal: parseFloat(productActive.precio_1.trim()),\r\n                nombreValueProductModal: productActive.nombrea.trim(),\r\n                bodegaValueProductModal: productActive.bodega.trim(),\r\n                grupoValueProductModal: productActive.grupo.trim(),\r\n                ivaValueProductModal: parseInt(productActive.impuesto.trim()) === 1 ? true : false,\r\n                servicioValueProductModal: parseInt(productActive.servicio.trim()) === 1 ? true : false,\r\n            }\r\n\r\n            setFormValues( productValues );\r\n        }else{\r\n            setFormValues( initValues );\r\n        }\r\n    }, [productActive]);\r\n\r\n    const handleInputChange = ({ target }) => {\r\n\r\n        if( target.type === 'checkbox' ){\r\n            setFormValues({\r\n                ...formValues,\r\n                [target.name]: target.checked\r\n            });\r\n        }else{\r\n            setFormValues({\r\n                ...formValues,\r\n                [target.name]: target.value\r\n            });\r\n        }\r\n    }\r\n    \r\n    const closeModal = (e) => {\r\n        e.preventDefault();\r\n        dispatch( uiCloseModal() );\r\n        dispatch( productClearActive() );\r\n        setFormValues( initValues );\r\n    }\r\n\r\n    const handleEditProduct = (e) => {\r\n        e.preventDefault();\r\n\r\n        if( precio1ValueProductModal !== '' && isNumeric(precio1ValueProductModal) && nombreValueProductModal !== '' ){\r\n            Swal.fire({\r\n                title: '¿Desea guardar los cambios?',\r\n                showDenyButton: true,\r\n                confirmButtonText: 'Guardar',\r\n                confirmButtonColor: '#0191CE',\r\n                denyButtonText: `No guardar`,\r\n            }).then(( result ) => {\r\n                if( result.isConfirmed ){\r\n                    dispatch( startEditProduct( fillProductModal, productActive.codigoa, productActive.bodega ) );\r\n                }\r\n            })\r\n        }else\r\n            Swal.fire({\r\n                title: \"Error\",   \r\n                text: 'Asegúrese de no dejar campos vacíos o verifique el precio sea numérico',   \r\n                icon: \"error\",   \r\n                showCancelButton: false,      \r\n                confirmButtonColor: \"#0191CE\",   \r\n                confirmButtonText: \"OK\",   \r\n                closeOnConfirm: false,   \r\n                closeOnCancel: false,\r\n                customClass: \"Custom_Cancel\"\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={ modalOpen }\r\n            onRequestClose={ closeModal }\r\n            shouldCloseOnOverlayClick={false}\r\n            style={ customStyles }\r\n            closeTimeoutMS={ 200 }\r\n            className=\"modal\"\r\n            overlayClassName=\"modal-fondo\"\r\n        >\r\n            {( storeList.length > 0 && groupProductList.length > 0 )\r\n            \r\n            ?   <form className='form-product-modal'>\r\n                    <header>\r\n                        <h1 className='title-product-modal'>Artículo</h1>\r\n                        {\r\n                            (actionModal === 'edit') &&\r\n                                <p className='required-fields-modal-product'>* Datos obligatorios</p>\r\n                        }\r\n                    </header>\r\n                    <hr/>\r\n\r\n                    <div className='codigo-product-input-modal'>\r\n                        <label>Código: </label>\r\n                        <p className='code-product-modal'>{ ( productActive ) ? productActive.codigoa : '' }</p>\r\n                    </div>\r\n\r\n                    <div className='codigo-product-input-modal'>\r\n                        <label>Bodega: </label>\r\n                        <p className='code-product-modal'>\r\n                            {( productActive ) \r\n                                ?   storeList.map( group => (\r\n                                        (group.codigo === productActive.bodega) && group.nombre\r\n                                    ))\r\n                                :   '' \r\n                            }</p>\r\n                    </div>\r\n\r\n                    <div className='precio1-product-input-modal'>\r\n                        <label>\r\n                            Precio 1\r\n                            {\r\n                                (actionModal === 'edit') &&\r\n                                    <i className='required-input'>*</i>\r\n                            } \r\n                        </label>\r\n                        <input \r\n                            type='number'\r\n                            autoComplete='off'\r\n                            disabled={ ( actionModal === 'edit' ) ? false : true }\r\n                            placeholder='26.50'\r\n                            name='precio1ValueProductModal'\r\n                            value={ precio1ValueProductModal }\r\n                            onChange={ handleInputChange } \r\n                        />\r\n                    </div>\r\n\r\n                    <div className='nombre-product-input-modal'>\r\n                        <label>\r\n                            Nombre \r\n                            {\r\n                                (actionModal === 'edit') &&\r\n                                    <i className='required-input'>*</i>\r\n                            } \r\n                        </label>\r\n                        <input \r\n                            type='text' \r\n                            autoComplete='off'\r\n                            disabled={ ( actionModal === 'edit' ) ? false : true }\r\n                            placeholder='ARTÍCULO EJEMPLO 1'\r\n                            name='nombreValueProductModal'\r\n                            value={ nombreValueProductModal }\r\n                            onChange={ handleInputChange } \r\n                        />\r\n                    </div>\r\n\r\n                    <div className='select-container-product-modal'>\r\n                        <label>Grupo</label>\r\n                        <div className='grupo-input-product-modal'>\r\n                            <select \r\n                                id='standard-select'\r\n                                disabled={ ( actionModal === 'edit' ) ? false : true }\r\n                                name='grupoValueProductModal'\r\n                                value={ grupoValueProductModal.trim() }\r\n                                onChange={ handleInputChange }\r\n                            >\r\n                                {groupProductList.map( group => ( \r\n                                    <option \r\n                                        key={ group.codigoga.trim() }\r\n                                        value={ group.codigoga.trim() }\r\n                                    >\r\n                                        { group.codigoga.trim() +' - '+ group.nombrega.trim() }\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    <div className='checks-product-modal'>\r\n                        <div className='iva-input-product-modal'>\r\n                            <label>Registra IVA</label>\r\n                            <input \r\n                                type='checkbox' \r\n                                name='ivaValueProductModal'\r\n                                disabled={ ( actionModal === 'edit' ) ? false : true }\r\n                                checked={ ivaValueProductModal }\r\n                                onChange={ handleInputChange } \r\n                            />\r\n                        </div>\r\n\r\n                        <div className='servicio-input-product-modal'>\r\n                            <label>Servicio</label>\r\n                            <input \r\n                                type='checkbox' \r\n                                name='servicioValueProductModal'\r\n                                disabled={ ( actionModal === 'edit' ) ? false : true }\r\n                                checked={ servicioValueProductModal }\r\n                                onChange={ handleInputChange } \r\n                            />\r\n                        </div>\r\n                        \r\n                    </div>\r\n\r\n                    <div className='buttons-column'>\r\n                        {\r\n                            (actionModal === 'edit') &&\r\n                                <button \r\n                                    onClick={ handleEditProduct }\r\n                                    className='button-save-modal'>\r\n                                    GUARDAR\r\n                                </button>\r\n                        }\r\n                        <button \r\n                            onClick={ closeModal }\r\n                            className='button-close-modal'>\r\n                            CERRAR\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n                \r\n            :   <div className='container-loading-product'>\r\n                    <i className=\"fa fa-circle-o-notch fa-spin fa-3x loading-product\"></i>\r\n                </div> \r\n\r\n            }\r\n\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default ProductoModal;","import { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Swal from 'sweetalert2';\r\n\r\nimport { clearSearchingClients } from '../../actions/clients';\r\nimport { clearSearchingProducts, startGroupsProductList, startProductList, startProductSave } from '../../actions/products';\r\nimport { startStoresList } from '../../actions/stores';\r\nimport { onView } from '../../actions/ui';\r\nimport { checkArt, isNumeric } from '../../helpers/standarClientValues';\r\nimport DataTable from '../ui/DataTable';\r\nimport ProductoModal from './ProductoModal';\r\n\r\nimport './articulos.css';\r\nimport { startClearInvoiceActive } from '../../actions/invoice';\r\n\r\nconst initValues = {\r\n    codigoValueProduct: '',\r\n    precio1ValueProduct: '',\r\n    nombreValueProduct: '',\r\n    bodegaValueProduct: '',\r\n    grupoValueProduct: '',\r\n    ivaValueProduct: false,\r\n    servicioValueProduct: false,\r\n}\r\n\r\nconst ArticulosScreen = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const { user } = useSelector( state => state.auth );\r\n    const { productList, productFind, groupProductList } = useSelector( state => state.product );\r\n    const { storeList } = useSelector( state => state.bodega );\r\n\r\n    const [loaded, setLoaded] = useState(false);\r\n    const [formValues, setFormValues] = useState( initValues );\r\n\r\n    const { \r\n        codigoValueProduct, \r\n        precio1ValueProduct, \r\n        nombreValueProduct, \r\n        bodegaValueProduct, \r\n        grupoValueProduct, \r\n        ivaValueProduct, \r\n        servicioValueProduct } = formValues;\r\n\r\n    const fillProduct = {\r\n        codigo: codigoValueProduct,\r\n        precio: precio1ValueProduct,\r\n        nombre: nombreValueProduct,\r\n        bodega: bodegaValueProduct,\r\n        grupo: grupoValueProduct,\r\n        impuesto: checkArt(ivaValueProduct),\r\n        servicio: checkArt(servicioValueProduct),\r\n    }\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem( 'thisPage', 'articulos' );\r\n        dispatch( onView( localStorage.getItem('thisPage') ) );\r\n        dispatch( clearSearchingClients() );\r\n        dispatch( clearSearchingProducts() );\r\n        dispatch( startClearInvoiceActive() );\r\n    }, [dispatch]);\r\n\r\n    // Obtener listado de productos.\r\n    useEffect(() => {\r\n        productList.length === 0 && dispatch( startProductList() );\r\n        productList.length > 0 && setLoaded(true);\r\n\r\n        //Listar grupos y bodegas\r\n        ( groupProductList.length === 0 && productList.length > 0 ) && dispatch( startGroupsProductList() );\r\n        ( storeList.length === 0 && productList.length > 0 && groupProductList.length > 0 ) && dispatch( startStoresList() );\r\n\r\n        if( storeList.length > 0 && groupProductList.length > 0 ){\r\n            const productInit = {\r\n                codigoValueProduct: '',\r\n                precio1ValueProduct: '',\r\n                nombreValueProduct: '',\r\n                bodegaValueProduct: storeList[0].codigo.trim(),\r\n                grupoValueProduct: groupProductList[0].codigoga.trim(),\r\n                ivaValueProduct: false,\r\n                servicioValueProduct: false,\r\n            }\r\n            setFormValues( productInit );\r\n        }else{\r\n            setFormValues( initValues );\r\n        }\r\n\r\n    }, [dispatch, productList, groupProductList, storeList]);\r\n\r\n    useEffect(() => {\r\n        if( productFind ){\r\n            setLoaded(false);\r\n            productFind.length > 0 && setLoaded(true);\r\n            productList.length > 0 && setLoaded(true);\r\n        }\r\n    }, [productFind, productList]);\r\n\r\n    const handleInputChange = ({ target }) => {\r\n\r\n        if( target.type === 'checkbox' ){\r\n            setFormValues({\r\n                ...formValues,\r\n                [target.name]: target.checked\r\n            });\r\n        }else{\r\n            setFormValues({\r\n                ...formValues,\r\n                [target.name]: target.value\r\n            });\r\n        }\r\n    }\r\n\r\n    const handleSave = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if( codigoValueProduct !== '' && precio1ValueProduct !== '' && isNumeric(precio1ValueProduct) && nombreValueProduct !== '' ){\r\n            Swal.fire({\r\n                title: '¿Desea guardar los cambios?',\r\n                showDenyButton: true,\r\n                confirmButtonText: 'Guardar',\r\n                confirmButtonColor: '#0191CE',\r\n                denyButtonText: `No guardar`,\r\n            }).then(( result ) => {\r\n                if( result.isConfirmed )\r\n                    dispatch( startProductSave( fillProduct, user ) );\r\n                    //Limpiar los campos del formulario después de guardar.\r\n                    setFormValues( formValues );\r\n            })\r\n        }else\r\n            Swal.fire({\r\n                title: \"Error\",   \r\n                text: 'Asegúrese de no dejar campos vacíos o verifique el precio solo sea numérico',   \r\n                icon: \"error\",   \r\n                showCancelButton: false,      \r\n                confirmButtonColor: \"#0191CE\",   \r\n                confirmButtonText: \"OK\",   \r\n                closeOnConfirm: false,   \r\n                closeOnCancel: false,\r\n                customClass: \"Custom_Cancel\"\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div className='product'>\r\n            {( groupProductList.length > 0 && storeList.length > 0 ) ? \r\n                    <div className='container-product-header'>\r\n                        <h1>Registro de artículos</h1>\r\n                        <div className='container-product-details'>\r\n                            <form>\r\n                                <div className='first-column-product-input'>\r\n                                    <div className='codigo-input-product'>\r\n                                        <label>Código <i className='required-input'>*</i></label> \r\n                                        <input \r\n                                            type='text' \r\n                                            placeholder='ART001'\r\n                                            autoComplete='off'\r\n                                            name='codigoValueProduct'\r\n                                            value={ codigoValueProduct }\r\n                                            onChange={ handleInputChange }\r\n                                        />\r\n                                    </div>\r\n                                    <div className='precio-input-product'>\r\n                                        <label>Precio 1 <i className='required-input'>*</i></label>\r\n                                        <input \r\n                                            type='number' \r\n                                            placeholder='26.50'\r\n                                            autoComplete='off'\r\n                                            name='precio1ValueProduct'\r\n                                            value={ precio1ValueProduct }\r\n                                            onChange={ handleInputChange } \r\n                                        />\r\n                                    </div>\r\n                                    <div className='nombre-input-product'>\r\n                                        <label>Nombre <i className='required-input'>*</i></label>\r\n                                        <input \r\n                                            type='text' \r\n                                            placeholder='ARTICULO EJEMPLO 1'\r\n                                            autoComplete='off'\r\n                                            name='nombreValueProduct'\r\n                                            value={ nombreValueProduct }\r\n                                            onChange={ handleInputChange } \r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className='second-column-product-input'>\r\n                                    <div className='select-container-product'>\r\n                                        <label>Bodega</label>\r\n                                        <div className='bodega-input-product'>\r\n                                            <select \r\n                                                id='standard-select'\r\n                                                name='bodegaValueProduct'\r\n                                                value={ bodegaValueProduct }\r\n                                                onChange={ handleInputChange }\r\n                                            >\r\n                                                {storeList.map( group => ( \r\n                                                    <option \r\n                                                        key={ group.codigo }\r\n                                                        value={ group.codigo }\r\n                                                    >\r\n                                                        { group.codigo +' - '+ group.nombre }\r\n                                                    </option>\r\n                                                ))}\r\n                                            </select>\r\n                                        </div>\r\n                                    </div>\r\n\r\n                                    <div className='select-container-product'>\r\n                                        <label>Grupo</label>\r\n                                        <div className='grupo-input-product'>\r\n                                            <select \r\n                                                id='standard-select'\r\n                                                name='grupoValueProduct'\r\n                                                value={ grupoValueProduct }\r\n                                                onChange={ handleInputChange }\r\n                                            >\r\n                                                {groupProductList.map( group => ( \r\n                                                    <option \r\n                                                        key={ group.codigoga }\r\n                                                        value={ group.codigoga }\r\n                                                    >\r\n                                                        { group.codigoga +' - '+ group.nombrega }\r\n                                                    </option>\r\n                                                ))}\r\n                                            </select>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className='third-column-product-input'>\r\n                                    <div className='iva-input-product'>\r\n                                        <label>Registra IVA</label>\r\n                                        <input \r\n                                            type='checkbox' \r\n                                            name='ivaValueProduct'\r\n                                            checked={ ivaValueProduct }\r\n                                            onChange={ handleInputChange } \r\n                                        />\r\n                                    </div>\r\n\r\n                                    <div className='servicio-input-product'>\r\n                                        <label>Servicio</label>\r\n                                        <input \r\n                                            type='checkbox' \r\n                                            name='servicioValueProduct'\r\n                                            checked={ servicioValueProduct }\r\n                                            onChange={ handleInputChange } \r\n                                        />\r\n                                    </div>\r\n                                </div>\r\n                                \r\n                                <div className='button-save-column-product'>\r\n                                    <button \r\n                                        onClick={ handleSave }\r\n                                        className='button-save-product'>\r\n                                        GUARDAR\r\n                                    </button>\r\n                                </div>\r\n                                <p className='required-fields'>* Datos obligatorios</p>\r\n                            </form>\r\n                        </div>\r\n\r\n                        {loaded \r\n                            ?   ( (productFind) \r\n                                    ? <DataTable items={ productFind } />\r\n                                    : <DataTable items={ productList } />\r\n                                )\r\n                            \r\n                            :   <div className='container-loading-product'>\r\n                                    <i className=\"fa fa-circle-o-notch fa-spin fa-3x loading-product\"></i>\r\n                                </div> \r\n                        }\r\n\r\n                        <ProductoModal />\r\n\r\n                    </div>\r\n\r\n                :   <div className='container-loading-product'>\r\n                        <i className=\"fa fa-circle-o-notch fa-spin fa-3x loading-product\"></i>\r\n                    </div> \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ArticulosScreen;"],"names":["startStoresList","dispatch","userEncrypt","localStorage","getItem","passwordEncrypt","databaseEncrypt","schemaEncrypt","fetchConToken","resp","json","body","ok","msg","length","storesList","Swal","title","text","icon","confirmButtonText","confirmButtonColor","type","types","payload","startBodegaAux","bodega","bodegaAux","customStyles","content","top","left","right","bottom","Modal","initValues","precio1ValueProductModal","nombreValueProductModal","grupoValueProductModal","ivaValueProductModal","servicioValueProductModal","useDispatch","modalOpen","useSelector","state","ui","actionModal","client","product","productActive","groupProductList","storeList","useState","formValues","setFormValues","fillProductModal","precio","nombre","grupo","impuesto","checkArt","servicio","useEffect","startGroupsProductList","productValues","parseFloat","precio_1","trim","nombrea","bodegaValueProductModal","parseInt","handleInputChange","target","name","checked","value","closeModal","e","preventDefault","uiCloseModal","productClearActive","isOpen","onRequestClose","shouldCloseOnOverlayClick","style","closeTimeoutMS","className","overlayClassName","codigoa","map","group","codigo","autoComplete","disabled","placeholder","onChange","id","codigoga","nombrega","onClick","isNumeric","showDenyButton","denyButtonText","then","result","isConfirmed","startEditProduct","showCancelButton","closeOnConfirm","closeOnCancel","customClass","codigoValueProduct","precio1ValueProduct","nombreValueProduct","bodegaValueProduct","grupoValueProduct","ivaValueProduct","servicioValueProduct","user","auth","productList","productFind","loaded","setLoaded","fillProduct","setItem","onView","clearSearchingClients","clearSearchingProducts","startClearInvoiceActive","startProductList","productInit","startProductSave","DataTable","items"],"sourceRoot":""}